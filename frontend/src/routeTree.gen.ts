/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MenuImport } from './routes/menu'
import { Route as MainImport } from './routes/main'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as CourseCourseidImport } from './routes/course.$courseid'

// Create/Update Routes

const MenuRoute = MenuImport.update({
  path: '/menu',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CourseCourseidRoute = CourseCourseidImport.update({
  path: '/course/$courseid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuImport
      parentRoute: typeof rootRoute
    }
    '/course/$courseid': {
      id: '/course/$courseid'
      path: '/course/$courseid'
      fullPath: '/course/$courseid'
      preLoaderRoute: typeof CourseCourseidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/main': typeof MainRoute
  '/menu': typeof MenuRoute
  '/course/$courseid': typeof CourseCourseidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/main': typeof MainRoute
  '/menu': typeof MenuRoute
  '/course/$courseid': typeof CourseCourseidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/main': typeof MainRoute
  '/menu': typeof MenuRoute
  '/course/$courseid': typeof CourseCourseidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/main' | '/menu' | '/course/$courseid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/main' | '/menu' | '/course/$courseid'
  id: '__root__' | '/' | '/about' | '/main' | '/menu' | '/course/$courseid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  MainRoute: typeof MainRoute
  MenuRoute: typeof MenuRoute
  CourseCourseidRoute: typeof CourseCourseidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  MainRoute: MainRoute,
  MenuRoute: MenuRoute,
  CourseCourseidRoute: CourseCourseidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/main",
        "/menu",
        "/course/$courseid"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/menu": {
      "filePath": "menu.tsx"
    },
    "/course/$courseid": {
      "filePath": "course.$courseid.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
